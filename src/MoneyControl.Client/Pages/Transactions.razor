@page "/Transactions"
@using MoneyControl.Shared.Models
@inject HttpClient Http

<h3>Transactions</h3>

@foreach (var item in _accounts)
{
<p><label><input type="checkbox" class="form-check-input" checked="@_selectedAccounts.Contains(item.Id)" @onchange="@(_ => ChangeAccountsFilter(item.Id))">@item.Name</label></p>
}
<p><input @onclick="@(_ => GetFilteredTransactions())" type="button" class="btn btn-primary" value="Apply"></p>
<p><input @onclick="@(_ => GetAllTransactions())" type="button" class="btn btn-secondary" value="Reset"></p>

<table class="table table-striped table-hover table-bordered">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">AccountId</th>
        <th scope="col">Sum</th>
        <th scope="col">DateUtc</th>
    </tr>
    </thead>
    <tbody class="table-group-divider">
    @foreach (var item in _transactions)
    {
        <tr scope="row">
            <th>@item.Id</th>
            <td>@item.AccountId</td>
            <td>@item.Sum</td>
            <td>@item.DateUtc.ToLongDateString()</td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<AccountModel> _accounts = new();
    private List<int> _selectedAccounts = new();
    private List<TransactionModel> _transactions = new();

    protected override async Task OnInitializedAsync()
    {
        var accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account");
        _accounts.Clear();
        
        var selectedAccounts = _accounts.Select(x => x.Id).ToList();
        _selectedAccounts.Clear();
        _selectedAccounts.AddRange(selectedAccounts);
        
        _accounts.AddRange(accounts);
        
        _transactions = await Http.GetFromJsonAsync<List<TransactionModel>>("transaction");
    }

    private async Task GetFilteredTransactions()
    {
        var result = string.Empty;
        for (var i = 0; i < _selectedAccounts.Count(); i++)
        {
            result += $"&accountids[{i}]={_selectedAccounts[i]}";
        }
        
        var transactions = await Http.GetFromJsonAsync<List<TransactionModel>>($"transaction/search?{result}");
        _transactions.Clear();
        _transactions.AddRange(transactions);
    }

    private async Task GetAllTransactions()
    {
        var transactions = await Http.GetFromJsonAsync<List<TransactionModel>>("transaction");
        _transactions.Clear();
        _transactions.AddRange(transactions);
        
        _selectedAccounts.Clear();
    }

    private void ChangeAccountsFilter(int accountId)
    {
        if (_selectedAccounts.Contains(accountId))
        {
            _selectedAccounts.Remove(accountId);
        }
        else
        {
            _selectedAccounts.Add(accountId);
        }
    }
}