@page "/"
@using System.Globalization
@using MoneyControl.Client.Pages.Transaction.Models
@using MoneyControl.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<HeaderComponent HeaderText="Transactions"
                 AddButtonText="Add Transaction"
                 ExportButtonText="Export"
                 FilterButtonText="Filter"
                 OnAdd="@AddTransactionAsync"
                 OnExport="@ExportToCsvAsync"
                 OnFilter="@OpenFilterAsync">
</HeaderComponent>

<div class="card mb-3">
    <table class="table table-striped table-hover table-bordered">
        <thead>
        <tr>
            <th style="width: 5%" scope="col">Id</th>
            <th scope="col">Account Name</th>
            <th scope="col">Sum</th>
            <th scope="col">Category</th>
            <th scope="col">Date</th>
            <th style="width: 5%" scope="col"></th>
        </tr>
        </thead>
        <tbody class="table-group-divider">
        @foreach (var item in _transactions)
        {
            <tr scope="row">
                <th>@item.Id</th>
                <td>@item.AccountName</td>
                <td>
                    <span class="fw-bold @GetSumCss(item.Sum)">@(item.Sum > 0 ? "+" : string.Empty)@item.Sum</span>
                </td>
                <td>@item.CategoryName</td>
                <td>@item.DateUtc.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture)</td>
                <td>
                    <span class="d-flex gap-2">
                        <button class="border-0 bg-transparent">
                            <i class="fa-solid fa-pen" @onclick="@(() => EditTransactionAsync(item))"></i>
                        </button>
                        <button class="border-0 bg-transparent">
                            <i class="fa-solid fa-trash-can text-danger" @onclick="@(() => DeleteTransactionAsync(item.Id))"></i>
                        </button>
                    </span>
                </td>
            </tr>
        }
        </tbody>
    </table>
    @if (_totalCount > _transactions.Count)
    {
        <button class="btn btn-light w-100" @onclick="@ShowMoreTransactionsAsync">Show More Transactions</button>
    }
</div>

@code {
    private List<AccountModel> _accounts = new();
    private List<int> _selectedAccounts = new();
    private List<TransactionModel> _transactions = new();
    private int _totalCount;
    private DateTime? _startDate;
    private DateTime? _endDate;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account");
        _accounts.Clear();
        _accounts.AddRange(accounts!);
        _selectedAccounts = _accounts.Select(x => x.Id).ToList();
        await Search(0);
    }

    private async Task ExportToCsvAsync()
    {
        var accounts = string.Empty;
        for (var i = 0; i < _selectedAccounts.Count; i++)
        {
            accounts += $"&accountids[{i}]={_selectedAccounts[i]}";
        }

        var result = (await Http.GetFromJsonAsync<byte[]>($"transaction/csv?{accounts}" +
                                                          $"&startutc={_startDate:yyyy-MM-dd}" +
                                                          $"&endutc={_endDate:yyyy-MM-dd}"))!;
        await JsRuntime.InvokeVoidAsync("downloadFile", $"report from {_startDate:yyyy-MM-dd} to {_endDate:yyyy-MM-dd}.csv",
            result);
    }

    private async Task Search(int offset)
    {
        var accounts = string.Empty;
        for (var i = 0; i < _selectedAccounts.Count; i++)
        {
            accounts += $"&accountids[{i}]={_selectedAccounts[i]}";
        }

        var result = (await Http.GetFromJsonAsync<TransactionsModel>($"transaction/search?count=20{accounts}&offset={offset}&startutc={_startDate:yyyy-MM-dd}&endutc={_endDate:yyyy-MM-dd}"))!;
        _transactions.Clear();
        _transactions.AddRange(result.Items);
        _totalCount = result.TotalCount;
    }

    private async Task ShowMoreTransactionsAsync()
    {
        var offset = _transactions.Count;
        await Search(offset);
    }

    private async Task AddTransactionAsync()
    {
        var modalReference = Modal.Show<AddTransaction>("Add Transaction");
        var result = await modalReference.Result;
        if (result.Cancelled)
        {
            return;
        }

        await Search(0);
    }

    private async Task OpenFilterAsync()
    {
        var filterParameters = new FilterParametersModel
        {
            Accounts = _accounts,
            SelectedAccounts = _selectedAccounts,
            StartDate = _startDate,
            EndDate = _endDate
        };

        var parameters = new ModalParameters().Add("FilterParameters", filterParameters);
        var options = new ModalOptions
        {
            Size = ModalSize.Custom,
            SizeCustomClass = "custom-modal-size"
        };

        var modalReference = Modal.Show<Filter>("Filter", parameters, options);
        var result = await modalReference.Result;
        if (result.Cancelled)
        {
            return;
        }

        if (result.Data is FilterParametersModel data)
        {
            _startDate = data.StartDate;
            _endDate = data.EndDate;
        }

        await Search(0);
    }

    private async Task EditTransactionAsync(TransactionModel transaction)
    {
        var copyTransaction = new TransactionModel
        {
            Id = transaction.Id,
            AccountId = transaction.AccountId,
            AccountName = transaction.AccountName,
            CategoryId = transaction.CategoryId,
            DateUtc = transaction.DateUtc,
            Sum = transaction.Sum
        };

        var parameters = new ModalParameters().Add("transaction", copyTransaction);
        var modalReference = Modal.Show<EditTransaction>("Edit Transaction", parameters);
        var result = await modalReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await Search(0);
    }

    private async Task DeleteTransactionAsync(int id)
    {
        var parameters = new ModalParameters().Add("id", id);
        var modalReference = Modal.Show<DeleteTransaction>("Delete Transaction", parameters);
        var result = await modalReference.Result;
        if (result.Cancelled)
        {
            return;
        }

        await Search(0);
    }

    private static string GetSumCss(double sum)
    {
        return sum > 0 ? "text-success" : "text-danger";
    }

}