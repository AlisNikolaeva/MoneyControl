@page "/"
@using System.Globalization
@using MoneyControl.Shared.Models
@inject HttpClient Http

<HeaderComponent HeaderText="Transactions"
                 ActionButtonText="Add Transaction"
                 OnClick="@AddTransactionAsync">
</HeaderComponent>

<div class="card p-2 mb-3">
    <span class="d-flex flex-wrap gap-2 pb-2">
        <label>
            <input type="checkbox" class="form-check-input" checked="@(_selectedAccounts.Count == _accounts.Count)" @onchange="@SelectAllAccounts"> Select All Accounts
        </label>
        @foreach (var item in _accounts)
        {
            <label>
                <input type="checkbox" class="form-check-input" checked="@_selectedAccounts.Contains(item.Id)" @onchange="@(_ => ChangeAccountsFilter(item.Id))"> @item.Name
            </label>
        }
    </span>

    <div class="pt-3">
        <label>Period:</label>
        <span class="d-flex py-2 gap-2">
            <input class="form-control"
                   type="date"
                   @bind="@StartDate">
            <input class="form-control"
                   type="date"
                   @bind="@EndDate">
        </span>
    </div>

    <span class="d-flex gap-2">
        <button @onclick="@ApplyFilterAsync" type="button" class="btn btn-primary">Apply</button>
        <button @onclick="@ResetFilterAsync" type="button" class="btn btn-secondary">Reset</button>
    </span>
</div>

<div class="mb-3">
    <table class="table table-striped table-hover table-bordered">
        <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Account Name</th>
            <th scope="col">Sum</th>
            <th scope="col">Date</th>
            <th scope="col"></th>
        </tr>
        </thead>
        <tbody class="table-group-divider">
        @foreach (var item in _transactions)
        {
            <tr scope="row">
                <th>@item.Id</th>
                <td>@item.AccountName</td>
                <td>
                    <span class="fw-bold @GetSumCss(item.Sum)">@(item.Sum > 0 ? "+" : string.Empty)@item.Sum</span>
                </td>
                <td>@item.DateUtc.ToString("dd.MM.yyyy", CultureInfo.InvariantCulture)</td>
                <td>
                    <span class="d-flex gap-2">
                        <button class="border-0 bg-transparent">
                            <i class="fa-solid fa-pen" @onclick="@(() => EditTransactionAsync(item))"></i>
                        </button>
                        <button class="border-0 bg-transparent">
                            <i class="fa-solid fa-trash-can text-danger" @onclick="@(() => DeleteTransactionAsync(item.Id))"></i>
                        </button>
                    </span>
                </td>
            </tr>
        }
        </tbody>
    </table>
    @if (_totalCount > _transactions.Count)
    {
        <button class="btn btn-light w-100" @onclick="@ShowMoreTransactionsAsync">Show More Transactions</button>
    }
</div>

@code {
    private List<AccountModel> _accounts = new();
    private List<int> _selectedAccounts = new();
    private List<TransactionModel> _transactions = new();
    private int _totalCount;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private DateTime? StartDate { get; set; }
    private DateTime? EndDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account");
        _accounts.Clear();
        _accounts.AddRange(accounts!);

        _selectedAccounts = _accounts.Select(x => x.Id).ToList();

        await Search(0);
    }
    
    private async Task Search(int offset)
    {
        var accounts = string.Empty;
        for (var i = 0; i < _selectedAccounts.Count; i++)
        {
            accounts += $"&accountids[{i}]={_selectedAccounts[i]}";
        }

        var result = (await Http.GetFromJsonAsync<TransactionsModel>($"transaction/search?count=20{accounts}&offset={offset}&startutc={StartDate:yyyy-MM-dd}&endutc={EndDate:yyyy-MM-dd}"))!;
        _transactions.AddRange(result.Items);
        _totalCount = result.TotalCount;
    }

    private async Task ResetFilterAsync()
    {
        _selectedAccounts = _accounts.Select(x => x.Id).ToList();

        _transactions.Clear();
        await Search(0);

        StartDate = null;
        EndDate = null;
    }

    private async Task ApplyFilterAsync()
    {
        _transactions.Clear();
        await Search(0);
    }

    private void ChangeAccountsFilter(int accountId)
    {
        if (_selectedAccounts.Contains(accountId))
        {
            _selectedAccounts.Remove(accountId);
        }
        else
        {
            _selectedAccounts.Add(accountId);
        }
    }

    private void SelectAllAccounts()
    {
        if (_selectedAccounts.Count == _accounts.Count)
        {
            _selectedAccounts.Clear();
        }
        else
        {
            _selectedAccounts = _accounts.Select(x => x.Id).ToList();
        }
    }

    private async Task ShowMoreTransactionsAsync()
    {
        var offset = _transactions.Count;
        await Search(offset);
    }

    private async Task AddTransactionAsync()
    {
        var modalReference = Modal.Show<AddTransaction>("Add Transaction");
        var result = await modalReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ApplyFilterAsync();
    }

    private async Task DeleteTransactionAsync(int id)
    {
        var parameters = new ModalParameters().Add("id", id);
        var modalReference = Modal.Show<DeleteTransaction>("Delete Transaction", parameters);
        var result = await modalReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ApplyFilterAsync();
    }

    private async Task EditTransactionAsync(TransactionModel transaction)
    {
        var copyTransaction = new TransactionModel
        {
            Id = transaction.Id,
            AccountId = transaction.AccountId,
            AccountName = transaction.AccountName,
            DateUtc = transaction.DateUtc,
            Sum = transaction.Sum
        };
        var parameters = new ModalParameters().Add("transaction", copyTransaction);
        var modalReference = Modal.Show<EditTransaction>("Edit Transaction", parameters);
        var result = await modalReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ApplyFilterAsync();
    }

    private static string GetSumCss(double sum)
    {
        return sum > 0 ? "text-success" : "text-danger";
    }

}