@using MoneyControl.Client.Validation
@using MoneyControl.Shared.Models
@using MoneyControl.Shared.Queries.Transaction.UpdateTransaction
@inject HttpClient Http

<EditForm EditContext="@EditContext">
    <div class="mb-3">
        <label for="account">Select the account:</label>
        <select id="account"
                class="form-select"
                @bind="@Transaction.AccountId">
            @foreach (var item in _accounts)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="sum">Enter the sum:</label>
        <input id="sum"
               class="form-control"
               placeholder="Sum"
               @bind="@Transaction.Sum">
        <ValidationMessage For="@(() => Transaction.Sum)"/>
    </div>

    <div class="mb-3">
        <label for="category">Select the category:</label>
        <select id="category"
                class="form-select"
                @bind="@Transaction.CategoryId">
            <option value="">Please select a category</option>
            @foreach (var item in _categories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="date">Enter the date:</label>
        <input id="date"
               class="form-control"
               placeholder="Date"
               type="date"
               @bind="@Transaction.DateUtc">
        <ValidationMessage For="@(() => Transaction.DateUtc)"/>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="@UpdateTransactionAsync">Update</button>
    </div>
</EditForm>

@code {
    private ValidationMessageStore _validationMessageStore = default!;
    private List<AccountModel> _accounts = new();
    private List<CategoryModel> _categories = new();
    private EditContext EditContext { get; set; } = default!;
    private List<ValidationRuleModel> ValidationRules { get; set; } = new();
    [Parameter] public TransactionModel Transaction { get; set; } = new();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Transaction);
        _validationMessageStore = new ValidationMessageStore(EditContext);
        SetValidationRules();
        _accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account") ?? new();
        _categories = await Http.GetFromJsonAsync<List<CategoryModel>?>("category") ?? new List<CategoryModel>();
    }

    private async Task UpdateTransactionAsync()
    {
        var result = ValidateContext();
        if (!result)
        {
            return;
        }

        await Http.PostAsJsonAsync("transaction/update", new UpdateTransactionCommand
        {
            Id = Transaction.Id,
            AccountId = Transaction.AccountId,
            Sum = Transaction.Sum,
            CategoryId = Transaction.CategoryId,
            DateUtc = Transaction.DateUtc
        });

        await BlazoredModal.CloseAsync();
    }

    private bool ValidateContext()
    {
        _validationMessageStore.Clear();
        foreach (var validationRule in ValidationRules.Where(validationRule => !validationRule.Satisfy()))
        {
            _validationMessageStore?.Add(validationRule.Accessor, validationRule.Message);
        }

        var result = EditContext.Validate();
        return result;
    }

    private void SetValidationRules()
    {
        ValidationRules.Clear();
        ValidationRules.Add(new ValidationRuleModel
        {
            Satisfy = () => Transaction.Sum != 0,
            Accessor = () => Transaction.Sum,
            Message = "Sum must not be equal to 0"
        });
        ValidationRules.Add(new ValidationRuleModel
        {
            Satisfy = () => Transaction.DateUtc != DateTime.MinValue,
            Accessor = () => Transaction.DateUtc,
            Message = "Date must be greater than 01.01.0001"
        });
    }

}