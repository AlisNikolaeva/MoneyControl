@using MoneyControl.Client.Pages.Category.Models
@using MoneyControl.Client.Validation
@using MoneyControl.Shared.Models
@using MoneyControl.Shared.Queries.Category.CreateCategory
@inject HttpClient Http

<EditForm EditContext="@EditContext">
    <div class="mb-3">
        <label for="name">Enter the category name:</label>
        <input id="name"
               class="form-control"
               placeholder="Category Name"
               @onchange="@(x => Model.Name = x.Value?.ToString())">
        <ValidationMessage For="@(() => Model.Name)"/>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="@CreateCategoryAsync">Add</button>
    </div>
</EditForm>

@code {
    private ValidationMessageStore _validationMessageStore = default!;
    private EditContext EditContext { get; set; } = default!;
    private List<ValidationRuleModel> ValidationRules { get; set; } = new();
    private AddCategoryModel Model { get; set; } = new();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override void OnParametersSet()
    {
        EditContext = new EditContext(new AccountModel());
        _validationMessageStore = new ValidationMessageStore(EditContext);
        SetValidationRules();
    }

    private async Task CreateCategoryAsync()
    {
        var result = ValidateContext();
        if (!result)
        {
            return;
        }

        await Http.PostAsJsonAsync("category/create", new CreateCategoryCommand
        {
            Name = Model.Name!
        });

        await BlazoredModal.CloseAsync();
    }

    private bool ValidateContext()
    {
        _validationMessageStore.Clear();
        foreach (var validationRule in ValidationRules.Where(validationRule => !validationRule.Satisfy()))
        {
            _validationMessageStore?.Add(validationRule.Accessor, validationRule.Message);
        }

        var result = EditContext.Validate();
        return result;
    }

    private void SetValidationRules()
    {
        ValidationRules.Clear();
        ValidationRules.Add(new ValidationRuleModel
        {
            Satisfy = () => !string.IsNullOrWhiteSpace(Model.Name),
            Accessor = () => Model.Name!,
            Message = "Name must not be empty"
        });
    }

}