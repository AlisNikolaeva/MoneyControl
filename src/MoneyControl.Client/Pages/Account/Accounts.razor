@inject HttpClient Http
@page "/Accounts"
@using MoneyControl.Shared.Models
<h3>Accounts</h3>

<p>
    <button @onclick="@AddAccountAsync" class="btn btn-primary">Add Account</button>
</p>

<table class="table table-striped table-hover table-bordered">
    <thead>
    <tr>
        <th scope="col">Id</th>
        <th scope="col">Name</th>
        <th scope="col">Balance</th>
        <th scope="col">Currency</th>
        <th scope="col"></th>
    </tr>
    </thead>
    <tbody class="table-group-divider">
    @foreach (var item in _accounts)
    {
        <tr scope="row">
            <th>@item.Id</th>
            <td>@item.Name</td>
            <td>@item.Balance</td>
            <td>@item.Currency</td>
            <td><button class="border-0 bg-transparent"><i class="fa-solid fa-trash-can text-danger" @onclick="@(() => DeleteAccountAsync(item.Id))"></i></button></td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<AccountModel> _accounts = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAccountsAsync();
    }

    private async Task AddAccountAsync()
    {
        var addAccountModal = Modal.Show<AddAccount>("Add Account");
        var result = await addAccountModal.Result;

        if (result.Cancelled)
        {
            return;
        }
        
        await ReloadAccountsAsync();
    }
    
    private async Task DeleteAccountAsync(int id)
    {
        var parameters = new ModalParameters().Add("id", id);
        var deleteAccountModel = Modal.Show<DeleteAccount>("Delete Account", parameters);
        var result = await deleteAccountModel.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ReloadAccountsAsync();
    }

    private async Task ReloadAccountsAsync()
    {
        _accounts.Clear();
        var accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account");
        _accounts.AddRange(accounts);
    }
}