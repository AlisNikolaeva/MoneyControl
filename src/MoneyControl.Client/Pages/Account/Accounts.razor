@inject HttpClient Http
@page "/Accounts"
@using MoneyControl.Shared.Models

<HeaderComponent HeaderText="Accounts"
                 AddButtonText="Add Account"
                 OnAdd="@AddAccountAsync">
</HeaderComponent>

<table class="table table-striped table-hover table-bordered">
    <thead>
    <tr>
        <th style="width: 5%" scope="col">Id</th>
        <th scope="col">Name</th>
        <th scope="col">Balance</th>
        <th scope="col">Currency</th>
        <th style="width: 5%" scope="col"></th>
    </tr>
    </thead>
    <tbody class="table-group-divider">
    @foreach (var item in _accounts)
    {
        <tr scope="row">
            <th>@item.Id</th>
            <td>@item.Name</td>
            <td>@item.Balance</td>
            <td>@item.Currency</td>
            <td>
                <span class="d-flex gap-2">
                    <button class="border-0 bg-transparent">
                        <i class="fa-solid fa-pen" @onclick="@(() => EditAccountAsync(item))"></i>
                    </button>
                    <button class="border-0 bg-transparent">
                        <i class="fa-solid fa-trash-can text-danger"
                           @onclick="@(() => DeleteAccountAsync(item.Id))"></i>
                    </button>
                </span>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private List<AccountModel> _accounts = new();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAccountsAsync();
    }

    private async Task AddAccountAsync()
    {
        var addAccountModal = Modal.Show<AddAccount>("Add Account");
        var result = await addAccountModal.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ReloadAccountsAsync();
    }

    private async Task EditAccountAsync(AccountModel account)
    {
        var copyAccount = new AccountModel
        {
            Id = account.Id,
            Name = account.Name,
            Balance = account.Balance,
            Currency = account.Currency
        };

        var parameters = new ModalParameters().Add("account", copyAccount);
        var modalReference = Modal.Show<EditAccount>("Edit Account", parameters);
        var result = await modalReference.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ReloadAccountsAsync();
    }

    private async Task DeleteAccountAsync(int id)
    {
        var parameters = new ModalParameters().Add("id", id);
        var deleteAccountModel = Modal.Show<DeleteAccount>("Delete Account", parameters);
        var result = await deleteAccountModel.Result;

        if (result.Cancelled)
        {
            return;
        }

        await ReloadAccountsAsync();
    }

    private async Task ReloadAccountsAsync()
    {
        _accounts.Clear();
        var accounts = await Http.GetFromJsonAsync<List<AccountModel>>("account");
        _accounts.AddRange(accounts);
    }

}