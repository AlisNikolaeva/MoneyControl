@using MoneyControl.Client.Validation
@using MoneyControl.Shared.Models
@using MoneyControl.Shared.Queries.Account.UpdateAccount
@inject HttpClient Http
@implements IDisposable

<EditForm EditContext="@EditContext">
    <div class="mb-3">
        <label for="name">Enter the account name:</label>
        <InputText id="name"
                   class="form-control"
                   placeholder="Account Name"
                   @bind-Value="@Account.Name">
        </InputText>
        <ValidationMessage For="@(() => Account.Name)"/>
    </div>

    <div class="mb-3">
        <label for="currency">Select the account currency:</label>
        <InputSelect id="currency"
                     class="form-select"
                     placeholder="Account Currency"
                     @bind-Value="@Account.Currency">
            @foreach (var item in Currencies)
            {
                <option value="@item.Key">@item.Key</option>
            }
        </InputSelect>
    </div>

    <div>
        <button class="btn btn-primary" @onclick="@UpdateAccountAsync">Update</button>
    </div>
</EditForm>

@code {
    private ValidationMessageStore _validationMessageStore = default!;
    private EditContext EditContext { get; set; } = default!;
    private List<ValidationRuleModel> ValidationRules { get; set; } = new();
    private Dictionary<string, string> Currencies { get; set; } = new();
    [Parameter] public AccountModel Account { get; set; } = new();
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Account);
        _validationMessageStore = new ValidationMessageStore(EditContext);
        SetValidationRules();
        EditContext.OnFieldChanged += EditContextOnOnFieldChanged;

        Currencies = await Http.GetFromJsonAsync<Dictionary<string, string>>("currencies.json") ?? new Dictionary<string, string>();
    }

    public void Dispose()
    {
        EditContext.OnFieldChanged -= EditContextOnOnFieldChanged;
    }

    private void EditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _validationMessageStore.Clear(e.FieldIdentifier);
        var rule = ValidationRules.FirstOrDefault(v => v.Accessor == e.FieldIdentifier.Model);

        if (rule is not null && !rule.Satisfy())
        {
            _validationMessageStore.Add(rule.Accessor, rule.Message);
        }

        StateHasChanged();
    }

    private async Task UpdateAccountAsync()
    {
        var result = ValidateContext();
        if (!result)
        {
            return;
        }

        await Http.PostAsJsonAsync("account/update", new UpdateAccountCommand
        {
            Id = Account.Id,
            Name = Account.Name,
            Currency = Account.Currency
        });

        await BlazoredModal.CloseAsync();
    }

    private bool ValidateContext()
    {
        _validationMessageStore.Clear();
        foreach (var validationRule in ValidationRules.Where(validationRule => !validationRule.Satisfy()))
        {
            _validationMessageStore?.Add(validationRule.Accessor, validationRule.Message);
        }

        var result = EditContext.Validate();
        return result;
    }

    private void SetValidationRules()
    {
        ValidationRules.Clear();
        ValidationRules.Add(new ValidationRuleModel
        {
            Satisfy = () => !string.IsNullOrWhiteSpace(Account.Name),
            Accessor = () => Account.Name,
            Message = "Name must not be empty"
        });
    }

}